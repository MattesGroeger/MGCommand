{"name":"MGCommand","body":"## Introduction\r\n\r\nThis library provides a lightweight solution for executing `Commands`. They can be executed sequentially or concurrently with `CommandGroups`. Because groups are `Commands` as well, they can be nested into each other. This can be used for scripted code execution. See the [MGCommandConfig](https://github.com/MattesGroeger/MGCommandConfig) project for more details.\r\n\r\n## Installation via CocoaPods\r\n\r\n- Install CocoaPods. See [http://cocoapods.org](http://cocoapods.org)\r\n- Add the MGCommand reference to the Podfile:\r\n```\r\n    platform :ios\r\n    \tpod 'MGCommand'\r\n    end\r\n```\r\n\r\n- Run `pod install` from the command line\r\n- Open the newly created Xcode Workspace file\r\n- Implement your commands\r\n\r\n## Usage\r\n\r\nThere are two command types: synchronous (`MGCommand`) and asynchronous (`MGAsyncCommand`). Commands can then be executed all at once (`MGCommandGroup`) or one after the other (`MGSequentialCommandGroup`).\r\n\r\n### Synchronous command\r\n\r\nA synchronous command needs to implement the `MGCommand` protocol. The `execute` method should contain the command logic. Here is a simple print command example ([taken from the example project](https://github.com/MattesGroeger/MGCommand/tree/master/MGCommandExample/Classes)):\r\n\r\n```objective-c\r\n@interface PrintCommand : NSObject <MGCommand>\r\n{\r\n\tNSString *_message;\r\n}\r\n\r\n- (id)initWithMessage:(NSString *)message;\r\n\r\n@end\r\n```\r\n\r\n```objective-c\r\n@implementation PrintCommand\r\n\r\n- (id)initWithMessage:(NSString *)message\r\n{\r\n\tself = [super init];\r\n\r\n\tif (self)\r\n\t{\r\n\t\t_message = message;\r\n\t}\r\n\r\n\treturn self;\r\n}\r\n\r\n- (void)execute\r\n{\r\n\tNSLog(_message);\r\n}\r\n\r\n@end\r\n```\r\n\r\n### Asynchronous command\r\n\r\nSometimes your command execution may not finish synchronously. In that case you may want to use the `MGAsyncCommand`. This command will not finish until a callback method has been called. This callback method will be set by the parent `CommandGroup` before execution ([see next paragraph](https://github.com/MattesGroeger/MGCommand/edit/master/Readme.md#executing-several-commands-at-once)). The following command finishes after a given delay ([taken from the example project](https://github.com/MattesGroeger/MGCommand/tree/master/MGCommandExample/Classes)):\r\n\r\n```objective-c\r\n@interface DelayCommand : NSObject <MGAsyncCommand>\r\n{\r\n\tNSTimeInterval _delayInSeconds;\r\n}\r\n\r\n@property (nonatomic, strong) CommandCallback callback;\r\n\r\n- (id)initWithDelayInSeconds:(NSTimeInterval)aDelayInSeconds;\r\n\r\n@end\r\n```\r\n\r\n```objective-c\r\n@implementation DelayCommand\r\n\r\n- (id)initWithDelayInSeconds:(NSTimeInterval)aDelayInSeconds\r\n{\r\n\tself = [super init];\r\n\r\n\tif (self)\r\n\t{\r\n\t\t_delayInSeconds = aDelayInSeconds;\r\n\t}\r\n\r\n\treturn self;\r\n}\r\n\r\n- (void)execute\r\n{\r\n\t[self performSelector:@selector(finishAfterDelay)\r\n\t\t\t   withObject:nil\r\n\t\t\t   afterDelay:_delayInSeconds];\r\n}\r\n\r\n- (void)finishAfterDelay\r\n{\r\n\t_callback();\r\n}\r\n\r\n@end\r\n```\r\n\r\n### Executing several commands at once\r\n\r\nCommands can be added to command groups (`MGCommandGroup`) which will then execute all commands concurrently. The command group itself implements the `MGAsyncCommand` protocol. It will finish when all added commands have finished their execution.\r\n\r\n```objective-c\r\nMGCommandGroup *commandGroup = [[MGCommandGroup alloc] init];\r\n\r\n[commandGroup addCommand:[[DelayCommand alloc] initWithDelayInSeconds:1]];\r\n[commandGroup addCommand:[[DelayCommand alloc] initWithDelayInSeconds:1]];\r\n[commandGroup addCommand:[[DelayCommand alloc] initWithDelayInSeconds:1]];\r\n\r\ncommandGroup.callback = ^\r\n{\r\n\tNSLog(@\"execution finished\");\r\n};\r\n\r\n[commandGroup execute];\r\n```\r\n\r\nBefore calling the execute method on the command group, you can set the callback block. It will be executed when the command group execution finished. The order you add the commands determines their execution order.\r\n\r\nNote that the callbacks for added asynchronous commands will be automatically set by the group. If you add only synchronous commands you don't need the callback as the group will finish instantly.\r\n\r\n### Executing commands sequentially\r\n\r\nIn case you want to have your commands being executed one after the other you can use the `MGSequentialCommandGroup`. The order you add the commands determines their execution order.\r\n\r\n## Example\r\n\r\nYou can find an example application in the [`MGCommandsExample` subfolder](https://github.com/MattesGroeger/MGCommand/tree/master/MGCommandExample/Classes). To see the exection, run the application in the simulator and press the start button. \r\n\r\nThe configured command groups look like this (pseudo code):\r\n\r\n\tsequential\r\n\t{\r\n\t\tDelayCommand(1)\r\n\t\tDelayCommand(1)\r\n\t\tDelayCommand(1)\r\n\t\tPrintCommand(\"concurrent {\")\r\n\t\t\r\n\t\tconcurrent\r\n\t\t{\r\n\t\t\tDelayCommand(1)\r\n\t\t\tDelayCommand(1)\r\n\t\t\tDelayCommand(1)\r\n\t\t}\r\n\t\t\r\n\t\tPrintCommand(\"}\")\r\n\t\tDelayCommand(1)\r\n\t\tDelayCommand(1)\r\n\t\tDelayCommand(1)\r\n\t\tPrintCommand(\"Finished\")\r\n\t}\r\n","tagline":"This library provides a lightweight way for executing commands. They can be executed sequentially or concurrently. This is done by command groups which in itself are commands as well.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}